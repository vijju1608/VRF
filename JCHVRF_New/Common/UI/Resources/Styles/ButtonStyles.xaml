<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:JCHVRF_New.Common.UI.Resources.Styles"
                    xmlns:ext="clr-namespace:JCHVRF_New.Common.UI.Extensions"
                    xmlns:fa="http://schemas.fontawesome.io/icons/"
                    xmlns:jchctrl="clr-namespace:JCHVRF_New.Common.Controls"
                    xmlns:md="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:diag="clr-namespace:System.Diagnostics;assembly=WindowsBase"
                    xmlns:conv="clr-namespace:JCHVRF_New.Common.UI.Converters"
                    xmlns:Converters="clr-namespace:MaterialDesignThemes.Wpf.Converters;assembly=MaterialDesignThemes.Wpf"
                    >

    <Style TargetType="{x:Type Button}" x:Key="IconButton">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource PrimaryColor1}"/>
        <Setter Property="ext:JCHUIService.IconColor" Value="{StaticResource PrimaryColor1}"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid Margin="8,0,0,3">
                            <jchctrl:JCHIcon HorizontalAlignment="Left" VerticalAlignment="Bottom" x:Name="IconImage" Padding="{Binding (ext:JCHUIService.IconPadding), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding (ext:JCHUIService.IconHeight), RelativeSource={RelativeSource TemplatedParent}}" Width="{Binding (ext:JCHUIService.IconWidth), RelativeSource={RelativeSource TemplatedParent}}" Foreground="{Binding (ext:JCHUIService.IconColor), RelativeSource={RelativeSource TemplatedParent}}" Type="{Binding (ext:JCHUIService.IconType), RelativeSource={RelativeSource TemplatedParent}}" AwesomeIcon="{Binding (ext:JCHUIService.AwesomeIcon), RelativeSource={RelativeSource TemplatedParent}}" VectorResource="{Binding (ext:JCHUIService.VectorResource), RelativeSource={RelativeSource TemplatedParent}}" ImagePath="{Binding (ext:JCHUIService.ImagePath), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Border HorizontalAlignment="Right" Margin="15,0,0,0" VerticalAlignment="Top" x:Name="NotificationBorder" CornerRadius="5" Height="13" Width="13" Background="White">
                                <TextBlock Foreground=" #C3002F" Text="{Binding (ext:JCHUIService.NotificationCount), RelativeSource={RelativeSource TemplatedParent}}" FontSize="10" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ext:JCHUIService.NotificationCount" Value="0">
                            <Setter Property="Visibility" TargetName="NotificationBorder" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" Value="Transparent"/>
                            <Setter Property="Background" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <!--<Setter Property="Background" Value="{StaticResource PrimaryColor4}"/>
                            <Setter Property="BorderBrush" Value="{StaticResource PrimaryColor4}"/>-->
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <!--<Setter Property="Background" Value="{StaticResource PrimaryColor4}"/>
                            <Setter Property="BorderBrush" Value="{StaticResource PrimaryColor4}"/>-->
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="BorderBrush" Value="Transparent"/>
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="ext:JCHUIService.IconColor"  Value="{StaticResource OtherColor4}"/>
                            <Setter Property="Foreground" Value="{StaticResource OtherColor4}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ToggleButton}" x:Key="IconToggleButton">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource PrimaryColor1}"/>
        <Setter Property="ext:JCHUIService.IconColor" Value="{StaticResource PrimaryColor1}"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <StackPanel Orientation="Horizontal">
                            <jchctrl:JCHIcon x:Name="IconImage" Padding="{Binding (ext:JCHUIService.IconPadding), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding (ext:JCHUIService.IconHeight), RelativeSource={RelativeSource TemplatedParent}}" Width="{Binding (ext:JCHUIService.IconWidth), RelativeSource={RelativeSource TemplatedParent}}" Foreground="{Binding (ext:JCHUIService.IconColor), RelativeSource={RelativeSource TemplatedParent}}" Type="{Binding (ext:JCHUIService.IconType), RelativeSource={RelativeSource TemplatedParent}}" AwesomeIcon="{Binding (ext:JCHUIService.AwesomeIcon), RelativeSource={RelativeSource TemplatedParent}}" VectorResource="{Binding (ext:JCHUIService.VectorResource), RelativeSource={RelativeSource TemplatedParent}}" ImagePath="{Binding (ext:JCHUIService.ImagePath), RelativeSource={RelativeSource TemplatedParent}}" />
                            <fa:ImageAwesome Margin="3,0,0,0" VerticalAlignment="Center" Foreground="White" Height="6" Width="6" Icon="SortDesc" Visibility="{TemplateBinding ext:JCHUIService.GlyphVisibility}"/>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ext:JCHUIService.AwesomeIcon" Value="None">
                            <Setter TargetName="IconImage" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="Button.IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" Value="Transparent"/>
                            <Setter Property="Background" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <!--<Setter Property="Background" Value="{StaticResource PrimaryColor4}"/>
                            <Setter Property="BorderBrush" Value="{StaticResource PrimaryColor4}"/>-->
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <!--<Setter Property="Background" Value="{StaticResource PrimaryColor4}"/>
                            <Setter Property="BorderBrush" Value="{StaticResource PrimaryColor4}"/>-->
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <!--<Setter Property="Background" Value="{StaticResource PrimaryColor4}"/>
                            <Setter Property="BorderBrush" Value="{StaticResource PrimaryColor4}"/>-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="CapsuleButton" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border" CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Height, Converter={conv:DivideByParameterConverter}, ConverterParameter=2}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="#FFF4F4F4"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                            <Setter Property="Foreground" Value="#FF838383"/>
                            <Setter Property="Cursor" Value="None"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style TargetType="{x:Type ToggleButton}" x:Key="SelectorButton">
        <Setter Property="Height" Value="25"/>
        <Setter Property="Width" Value="75"/>
        <Setter Property="Background" Value="{StaticResource OtherColor5}"/>
        <Setter Property="BorderBrush" Value="{StaticResource OtherColor4}"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border" CornerRadius="5" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="Button.IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <!--<Setter Property="Background" TargetName="border" Value="#FFBEE6FD"/>-->
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource PrimaryColor3}"/>
                        </Trigger>
                        <!--<Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#FFC4E5F6"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF2C628B"/>
                        </Trigger>-->
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="White"/>
                            <!--<Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>-->
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="#FFF4F4F4"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                            <Setter Property="Foreground" Value="#FF838383"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="{x:Type Button}" x:Key="FilterButton">
        <Setter Property="Height" Value="25"/>
        <Setter Property="Width" Value="75"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="{StaticResource OtherColor4}"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border" CornerRadius="5" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="Button.IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <!--<Setter Property="Background" TargetName="border" Value="#FFBEE6FD"/>-->
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource PrimaryColor3}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="Red"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF2C628B"/>
                        </Trigger>
                        <!--<Trigger Property="Button.IsSelected" Value="True">
                            <Setter Property="Background" TargetName="border" Value="Red"/>-->
                            <!--<Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>-->
                        <!--</Trigger>-->
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter Property="Background" TargetName="border" Value="Yellow"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                            <Setter Property="Foreground" Value="Green"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>